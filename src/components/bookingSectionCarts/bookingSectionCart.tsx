import React, { useEffect, useState } from 'react';
import Dropdown from "../dropDown/dropDown";

interface BookingSectionCartProps {
  propertySize: string;
  setPropertySize: (size: string) => void;
  numCleaners: string;
  setNumCleaners: (num: string) => void;
  duration: string;
  setDuration: (duration: string) => void;
  propertyType: string;
  setPropertyType: (type: string) => void;
  frequency: string;
  setFrequency: (frequency: string) => void;
  contactType: string;
  setContactType: (contactType: string) => void;
  language: string;
  setLanguage: (language: string) => void;
}

const BookingSectionCart: React.FC<BookingSectionCartProps> = ({
  propertySize,
  setPropertySize,
  numCleaners,
  setNumCleaners,
  duration,
  setDuration,
  propertyType,
  setPropertyType,
  frequency,
  setFrequency,
  contactType,
  setContactType,
  language,
  setLanguage,
}) => {
  const [autoGeneratedCleaners, setAutoGeneratedCleaners] = useState<string>("");

  const propertyTypeOptions = [
    { value: "home", label: "Home" },
    { value: "apartment", label: "Apartment" },
    { value: "villa", label: "Villa" },
    { value: "commercial property", label: "Commercial property" },
  ];

  const frequencyOptions = [
    { value: "once", label: "One-time" },
    { value: "weekly", label: "Weekly" },
    { value: "monthly", label: "Monthly" },
  ];

  const contactTypeOptions = [
    { value: "male", label: "Male" },
    { value: "female", label: "Female" },
  ];

  const languageOptions = [
    { value: "english", label: "English" },
    { value: "french", label: "French" },
  ];

  // Predefined durations 
  const durationMapping: Record<string, { minTime: number; maxTime: number }> = {
    "20m² - 50m² (215ft² - 538ft²)": { minTime: 2.5, maxTime: 3.00 },
    "50m² - 75m² (538ft² - 807ft²)": { minTime: 3.00, maxTime: 4.00 },
    "75m² - 100m² (807ft² - 1076ft²)": { minTime: 4.00, maxTime: 5.5 },
    "100m² - 125m² (1076ft² - 1345ft²)": { minTime: 5.5, maxTime: 6.5 },
    "125m² - 150m² (1345ft² - 1614ft²)": { minTime: 6.5, maxTime: 7.5 },
    "150m² - 200m² (1883ft² - 2153ft²)": { minTime: 7.5, maxTime: 9.00 },
    "200m² - 225m² (2153ft² - 2422ft²)": { minTime: 9.00, maxTime: 10.5 },
    "225m² - 250m² (2422ft² - 2691ft²)": { minTime: 10.5, maxTime:12.00 },
    "250m² - 275m² (2691ft² - 2960ft²)": { minTime: 12.00, maxTime: 13.5 },
    "275m² - 300m² (2960ft² - 3229ft²)": { minTime: 13.5, maxTime: 15.5 },
    "300m² - 325m² (3229ft² - 3498ft²)": { minTime: 15.5, maxTime: 17.00 },
    "325m² - 350m² (3498ft² - 3767ft²)": { minTime: 17.00, maxTime: 19.00 },
    "350m² - 375m² (3767ft² - 4036ft²)": { minTime: 19.00, maxTime: 4.00 },
    "375m² - 400m² (4036ft² - 4306ft²)": { minTime: 21.00, maxTime: 23.00 },
    "400m² - 425m² (4306ft² - 4575ft²)": { minTime: 23.00, maxTime: 25.00 },
    "425m² - 450m² (4575ft² - 4844ft²)": { minTime: 25.00, maxTime: 27.00 },
    "450m² - 475m² (4844ft² - 5113ft²)": { minTime: 27.00, maxTime: 29.00 },
    "475m² - 500m² (5113ft² - 5382ft²)": { minTime: 29.00, maxTime: 32.00 },
  };

  // Predefined Number of cleaners
  const cleanerMapping: Record<string, number> = {
    "20m² - 50m² (215ft² - 538ft²)": 1,
    "50m² - 75m² (538ft² - 807ft²)": 1,
    "75m² - 100m² (807ft² - 1076ft²)": 1,
    "100m² - 125m² (1076ft² - 1345ft²)": 1,
    "125m² - 150m² (1345ft² - 1614ft²)": 1,
    "150m² - 200m² (1883ft² - 2153ft²)": 2,
    "200m² - 225m² (2153ft² - 2422ft²)": 2,
    "225m² - 250m² (2422ft² - 2691ft²)": 2,
    "250m² - 275m² (2691ft² - 2960ft²)": 2,
    "275m² - 300m² (2960ft² - 3229ft²)": 2,
    "300m² - 325m² (3229ft² - 3498ft²)": 3,
    "325m² - 350m² (3498ft² - 3767ft²)": 3,
    "350m² - 375m² (3767ft² - 4036ft²)": 3,
    "375m² - 400m² (4036ft² - 4306ft²)": 4,
    "400m² - 425m² (4306ft² - 4575ft²)": 4,
    "425m² - 450m² (4575ft² - 4844ft²)": 4,
    "450m² - 475m² (4844ft² - 5113ft²)": 5,
    "475m² - 500m² (5113ft² - 5382ft²)": 5,
  };

  
  const formatTime = (time: number) => {
    const hours = Math.floor(time);
    const minutes = Math.round((time - hours) * 60);
    const formattedMinutes = minutes < 10 ? `0${minutes}` : minutes;
    return `${hours}.${formattedMinutes}`;
  };
   

  useEffect(() => {
    if (propertySize) {
      // Get duration and number of cleaners
      const matchedDuration = durationMapping[propertySize];
      const autoCleaners = cleanerMapping[propertySize] || 1;
  
      if (matchedDuration) {
        const formattedMinTime = formatTime(matchedDuration.minTime);
        const formattedMaxTime = formatTime(matchedDuration.maxTime);
        setDuration(`${formattedMinTime} - ${formattedMaxTime} hours`);
      }
  
      // Set auto-suggested cleaners
      setAutoGeneratedCleaners(autoCleaners.toString());
      setNumCleaners(autoCleaners.toString());
    }
  }, [propertySize, setDuration, setNumCleaners]);
  

  

  

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
      
        <Dropdown
          label="Approx. Property Size"
          value={propertySize}
          options={Object.keys(durationMapping).map(size => ({ value: size, label: size }))}
          onChange={setPropertySize}
          
        />
     
        <Dropdown
        label="Time Duration for Work"
        value={duration}
        type="text"
        onChange={setDuration}
        readOnly
        placeholder='Auto-suggested / Hours : minutes'
        />
        <Dropdown
        label="Number of Cleaners "
        value={numCleaners}
        type="number"
        placeholder='(Auto-suggested, Editable)'
        onChange={setNumCleaners}
        min={1}
        max={5}
        autoSuggestedValue={autoGeneratedCleaners}
        />


        <Dropdown
          label="Select your business or property"
          value={propertyType}
          options={propertyTypeOptions}
          onChange={setPropertyType}
        />

        <Dropdown
          label="Select Frequency"
          value={frequency}
          options={frequencyOptions}
          onChange={setFrequency}
        />

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <Dropdown
            label="Contact Gender"
            value={contactType}
            options={contactTypeOptions}
            onChange={setContactType}
          />
          <Dropdown
            label="Select Language"
            value={language}
            options={languageOptions}
            onChange={setLanguage}
          />
        </div>
    </div>
  );
};

export default BookingSectionCart;
